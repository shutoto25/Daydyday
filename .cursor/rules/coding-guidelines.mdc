---
description: 
globs: 
alwaysApply: true
---
# コーディングガイドライン

このプロジェクトでは、以下のコーディングルールに従って開発を行います。

## 基本原則
- クリーンアーキテクチャを採用。
- データ永続化にはリポジトリパターンを使用。
- ViewModelではMVIパターンで状態管理。
- 認証フローはAuth Activityで管理。
- Navigation Componentで画面遷移を管理。
- UI状態管理にはFlowまたはLiveDataを使用。
- レイアウトはJetpack Composeを使用。
- Material 3を使用。
- すべての変数・関数（パラメータ・戻り値）には型を明示すること。
- `any`型の使用は避けること。
- 必要に応じて独自型を定義すること。
- 1つの関数は20行未満、1つのクラスは200行未満を目安とする。
  - あくまでも目安のためマストではない。
- 1つのクラスのpublicメソッド・プロパティは10個未満を目安とする。
  - あくまでも目安のためマストではない。

## クラス設計
- SOLID原則を守る。
- 継承よりもコンポジションを優先。
- インターフェースで契約を定義。
- 小さく単一責任のクラスを心がける。

## 命名規則
- クラス名はPascalCase。
- 変数・関数・メソッド名はcamelCase。
- ファイル・ディレクトリ名はunderscores_case。
- 定数や環境変数はUPPERCASE。
- ブール値はisX, hasX, canXなど動詞で始める。
- 略語は使わず、意味のある単語を使う（API, URLなど標準的なものは除く）。
- マジックナンバーは避け、定数として定義すること。

## 関数・メソッド
- 関数名は必ず動詞＋目的語で命名する。
- 単一責任原則を守り、短くシンプルに保つ。
- 早期リターンを活用し、ネストを避ける。
- map, filter, reduceなど高階関数を活用する。
- シンプルな関数はアロー関数、複雑なものは名前付き関数を使う。
- デフォルト引数を活用し、nullチェックを減らす。
- 複数の引数や戻り値はオブジェクトでまとめる。

## データ・型
- データにはdata classを使う。
- プリミティブ型の乱用を避け、複合型でラップする。
- データは不変（immutable）を推奨。
- 変更しないリテラルはvalで宣言。

## 画面構成方針
- Screen: 画面
  - viewmodelへのアクセスはここのみ。
- Content: Screen直下
- Section: 画面幅いっぱいの要素
- Component: セクションより小さな要素

## 例外処理
- 予期しないエラーのみ例外で処理。
- 例外をcatchする場合は、問題の修正や文脈追加のため。
- それ以外はグローバルハンドラで処理。